new.value <- i*10
print(paste("new value:", new.value))
rv <- c(rv, new.value)
print(paste("rv:", rv))
}
return(rv)
}
mult.by.10(c(1,2,2,4))
answer <- mult.by.10(c(1,2,2,4))
answer
rm(list = ls())
getwd()
list.files
list.files()
setwd("/Users/anissa/Github/uwcom521-anissa)
setwd("/Users/anissa/Github/uwcom521-anissa")
list.files()
library(foreign)
mydata <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
/Users/anissa/Github/uwcom521-anissalilypad_anonymized.dta
rm(list = ls())
library(foreign)
lilypad <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
head(lilypad)
table(lilypad$gender)
#cut() turn numeric data into factors
airquality
head(airquality)
?airquality
table(airquality$Month)
hist(airquality$Temp)
cut(airquality$Temp, 10)
cut(airquality$Temp, quantile(airquality$Temp))
#Useful for binning data for visualizations
#Can add labels to these bins with the label function, which Mako's
#not going to go over
table(cut(airquality$Temp, quantile(airquality$Temp)))
#temp.tab
aq <- airquality
aq$Temp.quart <- cut(aq$Temp, quantile(aq$Temp))
head(aq)
table(aq$Temp.quart)
temp.tab <- table(aq$Temp.quart, aq$Month)
temp.tab
#genpol
matrix(c(762, 327, 468, 484, 239, 477), nrow = 2)
#Doesn't com up in the order we want it to appear, though
#This will be the way we want it:
genpol <- rbind(c(762, 327, 468),
c(484, 239, 477))
class(genpol)
colnames(genpol) <- c("Dem", "Ind", "Rep")
rownames(genpol) <- c("F", "M")
genpol
head(warpbreaks)
tapply(warpbreaks$breaks, warpbreaks$wool, sum)
#wb.tab
tapply(warpbreaks$breaks,
list(warpbreaks$wool, warpbreaks$tension), sum)
wb.tab <- tapply(warpbreaks$breaks,
list(warpbreaks$wool, warpbreaks$tension), sum)
chisq.test(temp.tab)
temp.tab
prop.table(temp.tab)
#Gives you the proportion of all the items in the table
prop.table(temp.tab)*100
#That gives you percents
aq$Temp > 80
prop.table(table(aq$Temp >80))
temp.chisq <- chisq.test(temp.tab)
class(temp.chisq)
temp.chisq$p.value
#can call things from the test, just to get that
#Or treat it like a list:
names(temp.chisq)
temp.chisq$expected
temp.chisq$residuals
summary(temp.chisq)
genpol.chisq <- chisq.test(genpol)
genpol.chisq
chisq.test(wb.tab)$statistic
?qnorm
qnorm(p=.975)
#Just gives you the critical value
?qchisq
#All chi squared tests are one-tailed
qchisq(p=0.95, df=3)
qchisq(p=0.95, df=12)
qchisq(p=0.95, df=100)
qchisq(p=0.95, df=20000)
#DEBUGGING
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
new.value <- i*10
rv <- c(new.value, rv)
}
return(rv)
}
mult.by.10(c(1,2,3,4))
#Got a bug ... returning answers in opposite order
#from what we want.
#So we can do print line debugging
mult.by.10 <- function (x) {
print(x)
rv <- c()
for (i in x) {
new.value <- i*10
rv <- c(new.value, rv)
}
return(rv)
}
mult.by.10(c(1,2,2,4))
#That seems ok, so going to go in and print a
#different line:
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
print(i)
new.value <- i*10
rv <- c(new.value, rv)
}
return(rv)
}
mult.by.10(c(1,2,2,4))
#That, too, seems write, so now going to print the "new.value"
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
new.value <- i*10
print(new.value)
rv <- c(new.value, rv)
}
return(rv)
}
mult.by.10(c(1,2,2,4))
#Appear to be muliplying it in the right order, too.
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
new.value <- i*10
rv <- c(new.value, rv)
print(rv)
}
return(rv)
}
mult.by.10(c(1,2,2,4))
#Now it's reversed, but can make it more clear what's
#happening by doing this:
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
new.value <- i*10
print(paste("new value:", new.value))
rv <- c(new.value, rv)
print(paste("rv:", rv))
}
return(rv)
}
mult.by.10(c(1,2,2,4))
#So what we were doing is adding the new value first
#need to reverse them.
mult.by.10 <- function (x) {
rv <- c()
for (i in x) {
new.value <- i*10
print(paste("new value:", new.value))
rv <- c(rv, new.value)
print(paste("rv:", rv))
}
return(rv)
}
answer <- mult.by.10(c(1,2,2,4))
answer
head(lilypad)
table.1 <- tapply(lilypad$order_type, lilypad$gender, sum)
table(lilypad$gender, lilypad$order_type)
colnames(table.1=Arduino, Both, LilyPad)
table.1
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1=Arduino, Both, LilyPad)
table.1
?colnames
colnames(table.1) <- Arduino, Both, LilyPad)
table.1
colnames(table.1) <- c(Arduino, Both, LilyPad)
table.1
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1) <- c("Arduino", "Both", "LilyPad")
table.1
table(lilypad$country)
?tapply
us.customers <- lilypad$country["United States"]
us.customers
rm(list=ls())
#First, found a read.dta() function in a library called foreign
library(foreign)
lilypad <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
#Then take a look at the data to see what's in it:
head(lilypad)
#(a)
#Table 1:
#first, see what they're calling the different genders and order types:
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1) <- c("Arduino", "Both", "LilyPad")
table.1
table(lilypad$country)
subset(lilypad$country=="United States")
?subset
subset(lilypad, lilypad$country="United States")
subset(lilypad, lilypad$country=="United States")
head(us.customers)
us.customers <- subset(lilypad, lilypad$country=="United States")
head(us.customers)
us.customers <- subset(lilypad, lilypad$country=="United States")
table.2 <- table(us.customers$gender, us.customers$order_type)
colnames(table.2) <- c("Arduino", "Both", "LilyPad")
table.2
chisq.all <- chisq.test(table.1)
summary(chisq.all)
chisq.us <- chisq.test(table.2)
summary(chisq.us)
chisq.test(table.1)
chisq.all <- chisq.test(table.1)
chisq.all
chisq.all <- chisq.test(table.1)
chisq.all
chisq.us <- chisq.test(table.2)
chisq.us
install.packages(gmodels)
install.packages("gmodels")
CrossTable(table.1)
help("gmodels")
CrossTable(table.1, table.2)
library("gmodels", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
CrossTable(table.1)
write.table(table.1)
?write.table
write.table(table.1, "LilyPadTable1")
list.files()
getwd()
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1", sep="\t")
list.files()
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1", sep="\c")
write.csv(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1", sep="\c")
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1")
Mako <- c(Day1 == "42", Day2 == "31", Day1-Day2/Day1 )
cscw.attendance <- rbind(c("42", "31")
c("19", "14"))
cscw.attendance <- rbind(c("42", "31"),
c("19", "14"))
cscw.attendance
cscw.attendance <- rownames("Mako", "Tommy")
rownames(cscw.attendance) <- c("Mako", "Tommy")
cscw.attendance <- rbind(c("42", "31"),
c("19", "14"))
rownames(cscw.attendance) <- c("Mako", "Tommy")
colnames(cscw.attendance) <- c("Day1", "Day2")
cscw.attendance
cbind(cscw.attendance) <- c(cscw.attendance$Day1-cscw.attendance$Day2/cscw.attendance$Day1)
cscw.attendance <- rbind(c(42, 31),
c(19, 14))
rownames(cscw.attendance) <- c("Mako", "Tommy")
colnames(cscw.attendance) <- c("Day1", "Day2")
cscw.attendance
cbind(cscw.attendance) <- c(cscw.attendance$Day1-cscw.attendance$Day2/cscw.attendance$Day1)
?cbind
class(cscw.attendance)
as.data.frame(cscw.attendance)
class(cscw.attendance)
cscw.attendance <- as.data.frame(cscw.attendance)
cscw.attendance
class(cscw.attendance)
cscw.attrition <- cbind(cscw.attendance, cscw.attendance$Day1 - cscw.attendance$Day2 / cscw.attendance$Day1)
cscw.attrition
cscw.attrition <- cbind(cscw.attendance, (cscw.attendance$Day1 - cscw.attendance$Day2 / cscw.attendance$Day1))
cscw.attendance
cscw.attrition
cscw.attrition.vector <- cscw.attendance$Day1 - cscw.attendance$Day2 / cscw.attendance$Day1
cscw.attrition.vector
cscw.attrition.vector <- ((cscw.attendance$Day1 - cscw.attendance$Day2) / cscw.attendance$Day1)
cscw.attrition.vector
rm(list = ls())
#PC1.
#Download this dataset in Stata DTA format which contains an anonymized and reduced version
#of the data visualized in the Buechley and Hill paper on Lilypad. Once you have it
#First, found a read.dta() function in a library called foreign
library(foreign)
lilypad <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
#Then take a look at the data to see what's in it:
head(lilypad)
#(a) Reproduce both Table 1 and Table 2 (just US users) using the dataset (as closely as possible).
#Table 1:
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1) <- c("Arduino", "Both", "LilyPad")
table.1
#Table 2:
#first, make a subset of U.S. customers
us.customers <- subset(lilypad, lilypad$country=="United States")
table.2 <- table(us.customers$gender, us.customers$order_type)
colnames(table.2) <- c("Arduino", "Both", "LilyPad")
table.2
#(b) Run a [chi-squared]-test on both tables.
#Compare to the paper (for Table 1, there doesn't seem to be a [chi squared] test for Table 2).
#Did you reproduce it?
chisq.all <- chisq.test(table.1)
chisq.all
chisq.us <- chisq.test(table.2)
chisq.us
#Yes, I reproduced the results of the chi-squared test for Table 1, even though it
#seems to be mislabeled in the paper.
#(c) Install the package "gmodels" and try to display the table using the function CrossTable().
#This will give you output very similar to SPSS.
install.packages("gmodels")
library(gmodels)
CrossTable(table.1)
CrossTable(table.2)
#(c) It's important to be able to import tables directly into your word processor
#without cutting and pasting individual cells. Can you export the output of your table?
#There are a bunch of functions you can use to do this.
#I used the "xtable" package but I think that write.table() and
#Excel would do the job just as well.
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1")
write.table(table.2, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable2")
#Hmmm, that sort of worked. I can't open them in Excel, but I can in a text editor or word
cscw.attendance <- rbind(c(42, 31),
c(19, 14))
rownames(cscw.attendance) <- c("Mako", "Tommy")
colnames(cscw.attendance) <- c("Day1", "Day2")
cscw.attendance
AttritionRate <- c((cscw.attendance$Day1-cscw.attendance)$Day2/cscw.attendance$Day1)
cbind(cscw.attendance, AttritionRate)
cscw.attendance <- as.data.frame(cscw.attendance)
class(cscw.attendance)
AttritionRate <- c((cscw.attendance$Day1-cscw.attendance)$Day2/cscw.attendance$Day1)
cbind(cscw.attendance, AttritionRate)
prop.test(cscw.attendance)
?prop.test
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
prop.test(cscw.attendance$)
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
cscw.attendance
rm(list = ls())
#PC1.
#Download this dataset in Stata DTA format which contains an anonymized and reduced version
#of the data visualized in the Buechley and Hill paper on Lilypad. Once you have it
#First, found a read.dta() function in a library called foreign
library(foreign)
lilypad <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
#Then take a look at the data to see what's in it:
head(lilypad)
#(a) Reproduce both Table 1 and Table 2 (just US users) using the dataset (as closely as possible).
#Table 1:
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1) <- c("Arduino", "Both", "LilyPad")
table.1
#Table 2:
#first, make a subset of U.S. customers
us.customers <- subset(lilypad, lilypad$country=="United States")
table.2 <- table(us.customers$gender, us.customers$order_type)
colnames(table.2) <- c("Arduino", "Both", "LilyPad")
table.2
#(b) Run a [chi-squared]-test on both tables.
#Compare to the paper (for Table 1, there doesn't seem to be a [chi squared] test for Table 2).
#Did you reproduce it?
chisq.all <- chisq.test(table.1)
chisq.all
chisq.us <- chisq.test(table.2)
chisq.us
#Yes, I reproduced the results of the chi-squared test for Table 1, even though it
#seems to be mislabeled in the paper.
#(c) Install the package "gmodels" and try to display the table using the function CrossTable().
#This will give you output very similar to SPSS.
install.packages("gmodels")
library(gmodels)
CrossTable(table.1)
CrossTable(table.2)
#(c) It's important to be able to import tables directly into your word processor
#without cutting and pasting individual cells. Can you export the output of your table?
#There are a bunch of functions you can use to do this.
#I used the "xtable" package but I think that write.table() and
#Excel would do the job just as well.
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1")
write.table(table.2, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable2")
#Hmmm, that sort of worked. I can't open them in Excel, but I can in a text editor or word
#PC2.
#At the Community Data Science Workshops we had two parallel afternoon sessions on Day 1.
#In my session, there were 42 participants. In Tommy Guy's session, there were only 19.
#The next week (Day 2), we asked folks to raise their hands if they had been in
#Tommy's session (14 did ) and how many had been in mine (31 did).
#There was clearly attrition in both groups!
#Was there more attrition in one group than another?
#Try answering this both with a test of proportions (prop.test()) and with
#a [chi-squared]. Compare your answers.
#Is there convincing evidence that there is a dependence between instructor and attrition?
#First, I'll make a table so I can visualize what's going on
cscw.attendance <- rbind(c(42, 31),
c(19, 14))
rownames(cscw.attendance) <- c("Mako", "Tommy")
colnames(cscw.attendance) <- c("Day1", "Day2")
cscw.attendance
#Wasn't able to index into cscw.attendance, I think because it's a matrix, so
#going to make it into a dataframe
cscw.attendance <- as.data.frame(cscw.attendance)
class(cscw.attendance)
#Now make a new vector called AttritionRate
AttritionRate <- c((cscw.attendance$Day1-cscw.attendance)$Day2/cscw.attendance$Day1)
#bind the new vector to the cscw.attendance dataframe
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
prop.test(cscw.attendance)
cscw.attendance
prop.test(cscw.attendance$AttritionRate)
prop.test(cscw.attendance$Day1, cscw.attendance$AttritionRate)
chisq.test(cscw.attendance)
getwd()
read.delim("Halloween2012-2014-2015_PLOS.tab")
halloween.data <- read.delim("Halloween2012-2014-2015_PLOS.tab")
head(halloween.data)
18.93 - 9.11(0) + 3.1(1) + 2.15 (1)
18.93 + 3.1 + 2.15
1 - (240.57/264.17)
1 - (240.57/264.17) * (146-1)/(146-3-1)
rm(list = ls())
getwd()
setwd("/Users/anissa/Github/uwcom521-anissa")
#PC1.
#Download this dataset in Stata DTA format which contains an anonymized and reduced version
#of the data visualized in the Buechley and Hill paper on Lilypad. Once you have it
#First, found a read.dta() function in a library called foreign
library(foreign)
lilypad <- read.dta("/Users/anissa/Github/uwcom521-anissa/lilypad_anonymized.dta")
#Then take a look at the data to see what's in it:
head(lilypad)
#(a) Reproduce both Table 1 and Table 2 (just US users) using the dataset (as closely as possible).
#Table 1:
table.1 <- table(lilypad$gender, lilypad$order_type)
colnames(table.1) <- c("Arduino", "Both", "LilyPad")
table.1
#Table 2:
#first, make a subset of U.S. customers
us.customers <- subset(lilypad, lilypad$country=="United States")
table.2 <- table(us.customers$gender, us.customers$order_type)
colnames(table.2) <- c("Arduino", "Both", "LilyPad")
table.2
#(b) Run a [chi-squared]-test on both tables.
#Compare to the paper (for Table 1, there doesn't seem to be a [chi squared] test for Table 2).
#Did you reproduce it?
chisq.all <- chisq.test(table.1)
chisq.all
chisq.us <- chisq.test(table.2)
chisq.us
#Yes, I reproduced the results of the chi-squared test for Table 1, even though it
#seems to be mislabeled in the paper.
#(c) Install the package "gmodels" and try to display the table using the function CrossTable().
#This will give you output very similar to SPSS.
install.packages("gmodels")
library(gmodels)
CrossTable(table.1)
CrossTable(table.2)
#(c) It's important to be able to import tables directly into your word processor
#without cutting and pasting individual cells. Can you export the output of your table?
#There are a bunch of functions you can use to do this.
#I used the "xtable" package but I think that write.table() and
#Excel would do the job just as well.
write.table(table.1, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable1")
write.table(table.2, "/Users/anissa/Github/uwcom521-anissa/LilyPadTable2")
#Hmmm, that sort of worked. I can't open them in Excel, but I can in a text editor or word
#PC2.
#At the Community Data Science Workshops we had two parallel afternoon sessions on Day 1.
#In my session, there were 42 participants. In Tommy Guy's session, there were only 19.
#The next week (Day 2), we asked folks to raise their hands if they had been in
#Tommy's session (14 did ) and how many had been in mine (31 did).
#There was clearly attrition in both groups!
#Was there more attrition in one group than another?
#Try answering this both with a test of proportions (prop.test()) and with
#a [chi-squared]. Compare your answers.
#Is there convincing evidence that there is a dependence between instructor and attrition?
#First, I'll make a table so I can visualize what's going on
cscw.attendance <- rbind(c(42, 31),
c(19, 14))
rownames(cscw.attendance) <- c("Mako", "Tommy")
colnames(cscw.attendance) <- c("Day1", "Day2")
cscw.attendance
#Wasn't able to index into cscw.attendance, I think because it's a matrix, so
#going to make it into a dataframe
cscw.attendance <- as.data.frame(cscw.attendance)
class(cscw.attendance)
#Now make a new vector called AttritionRate
AttritionRate <- c((cscw.attendance$Day1-cscw.attendance)$Day2/cscw.attendance$Day1)
#bind the new vector to the cscw.attendance dataframe
cscw.attendance <- cbind(cscw.attendance, AttritionRate)
chisq.test(cscw.attendance)
#There appears to be no difference between these.
#I can't figure out how to get the proptest to work.
#PC3. Download this dataset that was just published on
#"The Effect of Images of Michelle Obama’s Face on Trick-or-Treaters’ Dietary
#Choices: A Randomized Control Trial."
#The paper doesn't seem to have even been published yet so I think the abstract is all we have.
#We'll come back to it again next week.
#(a) Download and import the data into R. I needed to install the "readstata13" package to do so.
halloween.data <- read.delim("Halloween2012-2014-2015_PLOS.tab")
head(halloween.data)
#I just downloaded the tab delimited version instead of the original Stata version
#(b) Take a look at the codebook if necessary.
#Recode the data on being presented with Michelle Obama's face and
#the data on whether or not kids picked up fruit. we'll leave it at that for now.
#(c) Do a simple test on whether or not the two groups are dependent.
#Be ready to report those tests. The results in the paper will use linear regression.
#Do you have a sense, from your reading, why your results using the coding material we've learned might be different?
install.packages("gmodels")
